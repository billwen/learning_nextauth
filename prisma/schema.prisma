// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  accounts Account[]
  sessions Session[]

  workflows           Workflow[]
  executions          WorkflowExecution[]
  executionPhases     WorkflowExecutionPhase[]
  workflowUserBalance WorkflowUserBalance?
  WorkflowPurchase    WorkflowPurchase[]

  role          UserRole        @default(USER)
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Flow Data
model Workflow {
  id String @id @default(cuid())

  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?

  definition String
  status     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  executionPlan String?
  cron          String?

  creditsCost Int?
  lastRunAt   DateTime?
  lastRunId   String?
  nextRunAt   DateTime?

  executions WorkflowExecution[]

  // User cannot have two workflows with the same name
  @@unique([userId, name])
}

model WorkflowExecution {
  id String @id @default(cuid())

  workflowId String
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  userId          String
  user            User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  executionPhases WorkflowExecutionPhase[]

  trigger String
  status  String

  createdAt       DateTime  @default(now())
  startedAt       DateTime?
  completedAt     DateTime?
  updatedAt       DateTime  @updatedAt
  creditsConsumed Int
}

model WorkflowExecutionPhase {
  id String @id @default(cuid())

  userId        String
  user          User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  executionLogs WorkflowExecutionLog[]

  status          String
  number          Int
  node            String
  name            String
  startedAt       DateTime?
  completedAt     DateTime?
  inputs          String
  outputs         String
  creditsConsumed Int

  workflowExecutionId String
  workflowExecution   WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
}

model WorkflowExecutionLog {
  id String @id @default(cuid())

  executionPhaseId String
  executionPhase   WorkflowExecutionPhase @relation(fields: [executionPhaseId], references: [id], onDelete: Cascade)

  logLevel  String
  message   String
  timestamp DateTime
}

model WorkflowUserBalance {
  id Int @id @default(autoincrement())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  credits Int @default(0)
}

model WorkflowPurchase {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeId    String
  description String
  amount      Int
  currency    String
  date        DateTime
}
